// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5114.FentonRobotBuilderJava.subsystems;

import org.usfirst.frc5114.FentonRobotBuilderJava.Robot;
import org.usfirst.frc5114.FentonRobotBuilderJava.RobotMap;
import org.usfirst.frc5114.FentonRobotBuilderJava.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController leftDriveController = RobotMap.driveTrainLeftDriveController;
    SpeedController rightDriveController = RobotMap.driveTrainRightDriveController;
    RobotDrive robotDrive21 = RobotMap.driveTrainRobotDrive21;
    SpeedController speedController1 = RobotMap.driveTrainSpeedController1;
    SpeedController speedControllerUnhooked = RobotMap.driveTrainSpeedControllerUnhooked;
    RobotDrive robotDrive2Perpendicular = RobotMap.driveTrainRobotDrive2Perpendicular;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public enum Direction { NORTH, EAST, SOUTH, WEST };
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        setDefaultCommand(new DriveWithJoysticks());
    }
    
	 // Put methods for controlling this subsystem
	 // here. Call these from Commands.
	 public void takeJoystickInputs(Joystick left, Joystick right)
	 {
		// our robot is like 2 tank drive robots
		// with the right drive disabled on the second tank
		// so we pass in 0.0 for the right side
		robotDrive21.tankDrive(left, right, true);  // square the inputs
		robotDrive2Perpendicular.tankDrive(right.getX(), 0.0, true); // square the inputs
	 }
	
	 // This is basically a pass through to the tank drive which is already built for us
	 // but we don't want the perpendicular drive to run so we set it to 0.0
	 public void tankdriveonly(double outputMagnitude, double curve)
	 {
	 	// make sure that perpendicular drive is off
	 	robotDrive2Perpendicular.tankDrive(0.0, 0.0);
	
	 	// drive main tank drive
	 	robotDrive21.drive(outputMagnitude, curve);
	 }
	
	 public void stop()
	 {
	 	robotDrive21.tankDrive(0.0, 0.0);
	 	robotDrive2Perpendicular.tankDrive(0.0, 0.0);
	 }
	
	 public void driveInDirection(Direction direction)
	 {
	 	if (direction == Direction.NORTH)
	 	{
	 		robotDrive21.tankDrive(0.25, 0.25);
	 	}
	 	else if (direction == Direction.SOUTH)
	 	{
	 		robotDrive21.tankDrive(-0.25, -0.25);
	 	}
	 	else if (direction == Direction.EAST)
	 	{
	 		// somehow we should rotate the bot until it is facing NORTH before we do this
	 		// otherwise it won't be going east, it will just be going to the right
	 		robotDrive2Perpendicular.tankDrive(-0.25, 0.0);
	 	}
	 	else if (direction == Direction.WEST)
	 	{
	 		// somehow we should rotate the bot until it is facing NORTH before we do this
	 		// otherwise it won't be going west, it will just be going to the left
	 		robotDrive2Perpendicular.tankDrive(0.25, 0.0);
	 	}
	
	 	// keep driving a small amount of time before we exit this function 
	 	Timer.delay(0.004);
	 }

	 private double directionHelper(Direction direction)
	 {
	 	switch (direction)
	 	{
	 		case NORTH: return 0;
	 		case EAST: return 90;
	 		case SOUTH: return 180;
	 		case WEST: return 270;
	 	}
	 	// default to NORTH to avoid compiler warning
	 	return 0;
	 }    
    
    
}

